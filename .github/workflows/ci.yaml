name: "01_CI_Pipeline"

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  sonartest:
    runs-on: ubuntu-latest
    #if: false #temp disable the job to work 
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3

      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarqube-scan-action@v4.2.1
        with:
          args: >
            -Dsonar.organization=raunaksmatharu
            -Dsonar.projectKey=RaunakSMatharu_juice-shop
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: sonar cube quality gate badge
        run: |
            echo "## SonarQube Scan" >>  $GITHUB_STEP_SUMMARY
            echo "[![Quality gate](https://sonarcloud.io/api/project_badges/quality_gate?project=RaunakSMatharu_juice-shop)](https://sonarcloud.io/summary/new_code?id=RaunakSMatharu_juice-shop)" >> $GITHUB_STEP_SUMMARY

  docker-build:
    runs-on: ubuntu-latest
    #if: false #temp disable the job to work 
    
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3
      
      - name: "workflow summary"
        run: echo "## Docker Scan Result" >> $GITHUB_STEP_SUMMARY
      
      - name: "Docker Login"
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: "Build Docker image"
        uses: docker/build-push-action@v2
        with:
          push: false
          tags: ${{ vars.DOCKER_USERNAME }}/juice-shop:latest  #${{ github.run_id }}

      - name: "Docker Scout"
        uses: docker/scout-action@v1.16.1
        with:
          image-name: "${{ vars.DOCKER_USERNAME }}/juice-shop:latest" #${{ github.run_id }}
          command: "quickview"
          only-severities: critical,high
          exit-code: true


      - name: "Push Docker image"
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/juice-shop:latest #${{ github.run_id }}

  terraform-deploy:
    runs-on: ubuntu-latest
    env:
        TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
        TF_HOME: ${{ github.workspace }}/terraform
        TF_WORKSPACE: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.10.0" # specify your required version
          cli_config_credentials_token:  ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format Check
        #if: false # Something strange is happening with this step, so I'm disabling it for now
        run: |
          echo "Running Terraform Format check in the following directory: ./terraform"
          cd ./terraform
          output=$(terraform fmt)
          if [ -z "$output" ]; then
            echo "Terraform Format check is successful."
          else
            echo "Terraform Format check failed for the following files:"
            echo "$output"
            exit 1
          fi
          cd -

      - name: Terraform Init and Apply
        run: |
          cd ./terraform
          terraform init
          terraform validate
          cd -
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
          
      - name: Run Trivy vulnerability scanner in IaC mode
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-ref: ${{ env.TF_HOME }}
          scan-type: 'config'
          hide-progress: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        if: always() # Should run even if the previous step fails
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload Terraform Artifact
        uses: actions/upload-artifact@v3
        with:
          name: terraform
          path: |
              terraform/**/*.tf
              terraform/**/*.tfvars
              !terraform/.terraform/**
